/**
 * Created by Administrator on 2017/9/28.
 */

arr的一些操作：
    pop push shift  unshift indexof slice lastIndexOf reverse sort join map
    forEach filter for of splice includes concat some every reduce find


    indexOf: 数组和字符串都有这个方法

    map 有return  newarr=arr.map((item)=>(item+'a'))

    filter  过滤数组 ，生成一个新的数组

    includes  看是否包括，返回布尔值

    some 找true

    every  找false 更some刚好相反

    reduce  累加器


三个点运算符
let newFunc = (a,...rest)=>{ //剩余运算符
    console.log(a)
    console.log(...rest) ;// 展开运算符
};
newFunc(1,2,3);

 vue:
        表单元素可以实现双向绑定
        见了表单元素，一般就有v-model

 指令：
      v-model  双向绑定
      v-html 展示成html
      v-once 只绑定一次
      v-text 可以解决闪烁问题
      v-for 循环，可以循环数组，对象，字符串
            v-for="item in o"
            v-for="(item,index) in o"

      v-if :    操作的是dom
        v-if
            v-else-if

            v-else



谈谈对闭包的理解
    一：闭包的作用
        1).保护里面的私有变量不受外界的干扰
            jquery在封装的时候，为了保护里面的变量或者函数，在最外层包裹了一个自执行函数，目的就是保护，如果
            外面想用里面的，通过window.$=window.jQuery=jQuery

        2).形成一个不销毁的栈内存，保存一些值
            做页卡切换的时候，循环绑定事件，如果想让i作为自己的索引，需要在绑定事件的外层包裹一层作用域（不销毁）
            把索引保存起来，当然现在有es6的块级作用域后，使用let定义的变量自带这样的处理机制了



        我在处理项目中业务逻辑的时候，都会把功能划分成模块，使用单例模式构建模块化业务开发，实现组件的复用。


        ->闭包虽然常用，但是也尽量少用，因为耗内存，还有可能导致内存泄漏的问题
            =》堆栈内存释放问题
            =》内存泄漏问题


this:
    严格模式和非严格模式下


单例模式
    面向对象思想（OOP）
        构造函数模式
        原型链
        对象、类、实例

    什么是面向对象：
        我们把js中的知识点按照特征分成很多类，大类下分小类，例如：Number、String、
        ...HTMLCollection、NodeList、EventTarget ... 通过new类创建类的一个实例，
        实例就是类的一个具体事物。


    类的继承封装和多态
    封装：低耦合高内聚
    多态：重载和重写，js中没有类似于后台的重载（方法名相同参数不同是java中的重载，js中方法名相同，其中一个会把其余的都
   都覆盖掉，js中的重载是通过arguments在同一个方法中做不同的事情）
   继承：原型继承、call继承、寄生组合继承、es6中的继承（编译成为es5后其实就是寄生组合继承）

    3）实战应用：
        项目中我们一般都会应用构造函数思想，封装插件、类库、框架或者ui组件


JSON
eval及括号表达式
异常捕获
sort 对多维数组进行排序=>数组扁平化：把一个多维数组变成一维数组  reduce
    DOM的回流和重绘
    DOM的映射机制

    正则： //

    匹配：test  常用正则表达式的编写
    捕获：exec(正则捕获的懒惰性贪婪性)、match、replace















babel es6->es5

webpack 打包工具的用处

webpack是基于node的所有语法是commonjs规范

css 预编译器 Less sass  stylus
每次引用一个文件都会产生http请求，webpack打包就行啦
图片base64 不用发送请求（较小的图片自动转化base64）
es6->es5  webpack可以直接使用babel (babel-cli)
更改项目代码浏览器自动刷新
webpack可以帮我们提供服务接口
可以支持模块化，转化common.js 可以转化es6 可以转化amd cmd umd 


初始化 npm init -y

安装 npm install webpack --save-dev

转译es6语法
    npm install babel-core babel-loader --save-dev

添加es6语法识别(预设)
    npm install babel-preset-es2015 --save-dev

添加es7语法识别(预设)
    -stage-0包括阶段1，2，3
    npm install babel-preset-stage-0 --save-dev

解析css模块插入到style标签内
    npm install style-loader css-loader --save-dev

解析less需要less-loader
    npm install less less-loader --save-dev

解决图片(jpg|png|svg|wott|wott2)
    npm install file-loader url-loader --save-dev


打包html，正常情况下，应该在src下创建html文件，最终将打包的文件引入，最后导出到dist文件下
用插件来打包html
    npm install html-webpack-plugin --save-dev


webpack-dev-server(插件)
帮我们起一个本地的服务，跑我们的项目，支持热更新(代码改动，页面自动刷新)
npm install webpack-dev-server --save-dev





安装webpack一般不采用全局安装，全局安装会造成版本差异，所以采用本地安装

--save-dev 是开发时用，上线就不用啦
-g 是全局安装


commonjs的导出和导入
    module.exports=str;
    let str=require('./a.js')



es6的导出和导入
    export default {
        name:'lipanke',
        age:17
    }
    import b from './b.js'















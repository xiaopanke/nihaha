vue复习：
 MVVM双向数据绑定（数据变化会影响视图，视图变化会影响数据）
    model view viewmodel
    双向绑定内部靠的就是Object.defineProperty


    下载vue npm（node packdge manager）

    npm init -y
    npm install vue --save
 取值表达式  小胡子语法：
    {{}}  {{a.b}}


使用vue有两种方式：
     1,直接引用  工程化   <script src="./node_modules/vue/dist/vue.js"></script>
     2，你使用vue会给你一个Vue(类)  require() ?

//需要一个json，需要一个位置承载这些数据
let vm=new Vue({ //不兼容ie8以下，包括ie8  根实例
    el:'#app',  //是一个选择器querySelector ,不能选择body|html
    data:{ //所有的数据都要先声明一下，这个data最终会被这个实例代理
        msg:'1234'
    }
});

如果当前属性声明时不存在，新增的属性不会导致视图变化，也就是不会发生双向绑定，如果增加属性,需要用$set方法
vm.a={name:'lipanke',age:17} 替换掉原有的属性
vm.$set(vm.a,'address','henan');  新增属性
可以通过修改数据，来更改视图

箭头函数，没有this指向，没有arguments
需要改变this，就用箭头函数
let a=(n)=>{return n+1}  == let a=(n)=>(n+1)


v-model:
    <input type="text" v-model="msg">
    实现双向绑定，见到表单元素就加v-model,会自动的将数据绑定到表单元素的value中

diractive:指令
    v-once : 只绑定一次，数据变化后不更新
    v-html : 展示成html
    v-text : 可以解决闪烁问题 {{}}是v-text的简写
    v-show:控制的是样式
    v-if ：控制的是DOM

{{}} 可以做运算，可以做三元表达式
        {{msg==='a' ? 'ok' : 'no'}}

vm.$set 添加新的属性
vm.$data  取data
vm.$el取的是元素


v-for 循环 可以循环数组 对象 字符串
    v-for="(item,index) in arr"
    {{item}}{{index}}


v-cloak  解决闪烁问题
css:[v-cloak]{display:none}
先让带有v-cloak的元素隐藏掉，当vue加载好后，会自动将v-cloak这个属性移除掉


method
    methods存放的是方法，不能和data中的内容重名，最后都会合并到vm的实例上，被
    vm所代理，method中this指向的都是vm实例
    vue中方法可以带括号也可以不带括号，v-on可以简写成@事件名
    如果写括号需要手动传入$event属性
    @mousedown="a($event)"


如果要获取输入框的内容，需要使用up ，可以使用键盘修饰符
@keyup.13="add"
@keyup.enter="add"


vue-resource
    <script src="node_modules/vue-resource/dist/vue-resource.js"></script>

    vue-resource 他会将一个$http属性挂载vm上
    $http是定义在vue的原型上，实例上可以直接使用
    this.$http.get('./products.json').then( (res)=> { //success
        //vue-resource将this改成了vm实例
        this.products = res.body;
    }, (err) => { //error
        console.log(err);
    });

filters 过滤器
    改变展示的结果，而且可以实现共用 ，也可以用methods来实现
    {{data | toFixed(2,'￥')}}
        toFixed(input,param1,param2){ //必须就是|后面的名字,
            //input 代表的是|前面的结果 返回值则是最终展现的结果
            return param2+parseFloat(input).toFixed(param1);
        }

created:实例加载后执行，等data和methods加载成功执行
    一般放ajax请求请求过来的代码


vue的修饰符，都在事件后面以.开头，而且可以使用多个事件.stop.prevent
    @click.capture="" 捕获 ，先捕获，再冒泡
     @click.self="" 只有点击自己时触发 e.target||e.srcElement
     @click.once 只触发一次

     .stop阻止冒泡 e.stopPropagation || cancelBubble=true
     .prevent 阻止默认行为 e.preverDefault returnValue=false
     .capture 捕获行为addEventListener('click',fn,true)



v-bind:
       :title="title"
       :src="src"
       :style="stryle"
       通过boolean类型，使其判断样式是否生效
       :class="{back:true,fontSize:true}"

       数值中写的类名都会生效
       :class="['back',{fontSize:true}]"

computed:  计算属性，但是写的时候是方法


watch:{
    heart(){ //和要监控的数据必须相同名字
    }
}


methods computed watch的区别
监控一个数据的变化（纯粹就是执行一件事）可以实现异步方法

h5的新属性，拖拽
draggable="true" 让元素可以拖拽
e.dataTransfer.setDragImage() 设置拖拽的图片
dragstart
dragover 阻止dragover 否则不会触发drop
drop

template:'<div id="a">{{a}}</div>'
如果内部有模板就不会使用外部的模板


生命周期：
    beforeCreate 一般用不到，这里不能拿到数据和方法
    created 获取数据，方法和数据已经挂载在实例了了
    beforeMount 此函数在挂载 之前执行，一般用不到
    mounted 可以操作真实的dom
    beforeUpdate dom更新前会触发这个事件，可以做一个全局数据的监控，我们一般用watch
    updated
    beforeDestroy 一般清空定时器，或者移除自定义函数
    destroy

$nextTick 等待dom渲染完成后，再操作dom dom渲染是异步渲染
    mounted(){
        this.$nextTick(()=>{
            console.log(this.msg);
        })
    }

    vm.#destroy();移除所以的监听和观察者，孩子组件



手动挂载
let vm=new Vue({
    data:{
    }
}).$mount("#app")

spa框架：
	单页应用 （1个页面）

组件：component
	把一个复杂的页面拆分成若干个组件，最后再拼成一个完整的页面

组件的分类：
	页面级组件（home组件 ,list组件）
	基础组件（页面组件包含着基础组件，可复用的组件）

组件的使用：
	全局组件（不需要在组件中再次声明了）
	-写一些插件时可能会需要用到全局组件
	局部组件（在某个组件中声明的）
	自己写的一些组件一般都是局部组件

全局组件：
	Vue.component(tagName,options)

局部组件：
	new Vue({
		el:'',
		components:{
			child:{
				template:'<div></div>'
			}
		}
	})

1.组件的名字不能使用已经存在的标签
2.一个组件就是一个对象
3.名字规范 myHello会自动转化成myhello
4.组件模板中必须只能仅仅有一个根节点
5.标签中的名字可以转化（知横线转驼峰->大写转小写）一律名字相同即可
6.组件中的data必须是一个函数
7.组件中的数据可以在自己的模板中使用

template:'<div></div>' //用模板中的内容替换掉标签(el)

局部组件 定义在内部的，组件之间应该是互不影响的，所以data是个函数，返回一个新对象，来避免相互引用的问题
对象是引用数据类型

组件中函数的this指向的是当前组件的实例

组件的使用顺序
1.引入这个组件
2.注册组件
3.在模板中使用（是在父组件模板中使用）

template中的内容会被转化成虚拟dom,文档碎片，先获取第一个元素通过createElement创建一个元素，firstChild appendChild到这个dom元素里


MVVM=数据劫持+compile+发布订阅

组件的特点：相互独立，两个人之间没有任何关系
子组件不能直接更改父组件的数据 ，可以子组件传递给父组件，父组件改变后再重新渲染子组件
单向数据流 父组件变化刷新子组件

属性校验：校验父灯传递过来的属性
props:['title'] 数组方式不能实现属性的校验
props:{
	title:{
 		type:[Number,Boolean,Array,Object,String],
		default:'无',
		validator(val){ val代表传递过来的值 ，如果返回true通过 ，返回false，不通过
			return val>50
		}
	}
}


子组件的属性ref
	ref放在原生dom上可以获取元素，放在组件上可以获取当前组件
<child ref="child"></child>

eg:this.$refs.child.hit();

子组件通过event给父组件传递信息
第一种方法：
	<child @child-fn="changeColor"></child>
	子组件：this.$emit('child-fn','blue')
		第一个参数是方法，第二个参数是传递给父级的

this.$on('child-fn',changeColor) 这个this指的是child
给子组件绑了一个监听函数，这个监听函数是父类的

第二种方法：
	<child :msg="msg" @update:msg="val=>msg=val"></child>
	子组件：this.$emit('update:msg','blue');

第三种方法：
	<child :msg.sync="msg" ></child>
	子组件：this.$emit('update:msg','blue');



使用模板编译的方式：
1.有el
2.template
3.render
会将el和template的形式转化成AST(抽象语法树)会转化成一个函数render 会个vhode{tage:'div',children:['hello',{tab:'h1'}]}->createElement->append页面中
let vm = new Vue({
      el:'#app',
      render:createElement=>{
         return createElement('div',{class:'a'},['hello',createElement('h1','你好')])
      }
      /*template:`<div>
        hello
        <h1>你好</h1>
      </div>`*/
  })


//父组件挂载完成并不能确保子组件一定渲染完成，所以在mounted中一般会加nextTick防止无法获取的最新的结果
mouted(){
	this.$nextTick(()=>{

	})
}


slot:
例如别人写好的一个模态框组件 我们来使用,我们会先引入进来,传入一些自己的内容,所以绑定的方法都是自己的
父组件中：
<header slot="header">{{msg}}</header>
<footer slot="footer"></footer>

子组件中：
<slot name="header"></slot>
<button @click="close">&times;</button>
<slot name="default"></slot>
<slot name="footer"></slot>

keeplive：保持缓存
组件切换时用的东西
加了keeplive created只会执行一次 activated都会执行
不加keeplive created都会执行 activated不会执行


router 路由
需要引用vue-router.js这个js

安装
npm init -y
npm install vue-router

不同的url返回不同的结果
vue的路由（spa）spa中只有一个首页，切换url地址显示不同的组件
切换路径但是页面仍然是以前的那个
	1.hash #
	2.pushState 没有#号(在开发的时候会产生404)，上线时会使用这个方式，可以依赖服务端解决404问题
	3.mode模式 默认就是hash  如果mode:'history' h5的api


步骤：
1.创建一个VuerRouter实例
  let router = new VueRouter({
      routes // 将路由表注入进来
  });

2.准备好需要切换的组件
  let Home = {template:'<div>首页</div>'};
  let List = {template:'<div>列表页</div>'};

3.将路由实例放在vue实例中,在任意组件中会多两个属性
let vm = new Vue({
      el:'#app',
      router
      // this.$router this.$route
  });

 方法：this.$router
 	后退：this.$router.go(-1)  this.$router.back()
 	跳页面： this.$router.push('/home')

 属性：this.$route
 		获取路径中的id  this.$route.params.id

//路由表
 let routes = [
      {path:'/home',component:Home},
      {path:'/list',component:List}
  ];



router-view
	<router-view><router-view>会将默认匹配到的结果插到此标签内

router-link
	<router-link to="/list"></router-link>
	<router-link :to="{path:'/list'}" tab="span"></router-link>

	to动态绑定时可以放对象 tag表示编译后的标签名


let router = new VueRouter({
    mode:'history', // h5 pushState没有# 但是会有404,开发时采用默认hash的形式
    routes:[
        {path:'',component:Home}, // 配置默认显示的组件
        {path:'/home',component:Home},
        {path:'/list',component:List},
        // {path:'*',component:List} //如果这样写组件是切换了 但是路径还是写错的
        {path:'*',redirect:'/list'} //重定向 一般是404配置
    ]
  });

路由的嵌套
routes:[
          {path:'/home',component:Home},
          {
              path:'/profile',
              component:Profile,
              children:[ //children的path不能加/
                  {path:'aboutme',component:AboutMe},
                  {path:'introduce',component:Introduce},
              ]
          }
      ]


webpack
用来打包vue
- vue组件都写在写在一起了,.vue文件,每一个.vue文件都是一个组件 .js babel-loader .css css-loader
.vue vue-loader

组件组成
1.模板（结构） 需要vue-template-compiler
2.逻辑（行为）
3.样式

 webpack(模块化)
webpack webpack-dev-server
js打包 babel-core babel-loader babel-preset-es2015 babel-preset-stage-0
css模块 less less-loader css-loader style-loader
img模块 url-loader file-loader
html打包 html-webpack-plugin
vue模块 vue-loader vue-template-compiler
vue vue-router


vue-cli 脚手架
npm install vue-cli -g
vue init 模板名 项目名
vue init webpack vue-pro-webpack




width:100%;position: fixed;top:50px;left:0;right:0;bottom:60px;
  overflow-y: scroll;


import from 'vue' 前端 用这个
module.exports  是后台的写法 有.



npm install axios vuex


开node服务器
//npm install -g nodemon
//nodemon 文件名


图片的懒加载
vue-lazyload


get 获取
post 前端传给后台(新建)
put  修改
delete 修改




JSON.stringify(book) //将对象转化成字符串
JSON.parse('{"a":1}') //将字符串转化成对象





找到数组里id相同的，返回是一个数组里的某一项
let book=books.find(item=>(item.id===id))


去掉等于那个id的，返回是一个数组
let books=books.filter(item=>(item.id!==id))

//遍历一个数组，返回一个新数组
let books=books.map(item=>(item*2))
//找，看有没有相同的，返回一个boolean
 flag =state.collects.some((a)=>a.id==book.id)



//监控路径参数的变化
watch:{
        $route(){
            this.getBook();
        }
    }




http http.createServer((req,res)=>{}).listen(3000); 用来创建服务
url  let {pathname,query}=url.parse(req.url,true)  处理请求的地址

fs  fs.readFile('./book.json','uft8',(err,data)=>{})  读取数据，读取出来的是字符串
	fs.writeFile('./book.json',JSON.stringify(data),()=>{}) 写入数据 写过去的也是字符串





对象展开运算符
computed: {
  localComputed () { /* ... */ },
  // 使用对象展开运算符将此对象混入到外部对象中
  ...mapState({
    // ...
  })
}





vuex:
子组件里：
	{{$store.state.count}} 获取数据
	this.$store.commit('add',3) 改变数据

vuex:
import Vuex from 'vuex'

Vue.use(Vuex)
let state={  //data:{}  和组件中的数据功能是一样的
  count:0

}
let mutations={ //就是组件中的方法
    add(state,val){ //state代表的是状态，是默认参数
        state.count+=val;
    },
    reduce(state,val){
        state.count-=val
    }
}
let store=new Vuex.Store({
  state,
  mutations,
  strict:true //开户严格模式，必须通过mutaion来修改
})

new Vue({
    el:'#app',
    store, //this.$store 每个组件都会拥有一个$store属性
    ...App,
})



轮播
npm install vue-awesome-swiper --save





那些报错：
SyntaxError: Unexpected token o in JSON at position 1
json文件错啦，点击进去看看










@全体成员
本周六讲解express cookie session
express
文档
http://www.zhufengpeixun.cn/docs/html/node%E5%91%A8%E6%9C%AB%E5%A4%A7%E7%BA%B2/1.Express.html
http://www.zhufengpeixun.cn/docs/html/node%E5%91%A8%E6%9C%AB%E5%A4%A7%E7%BA%B2/2.cookie.html
http://www.zhufengpeixun.cn/docs/html/node%E5%91%A8%E6%9C%AB%E5%A4%A7%E7%BA%B2/3.session.html
视频
下载链接：http://pan.baidu.com/s/1bo87HoF 密码：dcpr
在线观看 http://www.ablesky.com/kecheng/detail_1260500
张仁阳<hongqishi@qq.com> 2017/10/27 22:26:29
React参考资源
英文官方文档
https://facebook.github.io/react/
中文官方文档
https://doc.react-china.org/
http://www.css88.com/react/
redux官网文档
英文 http://redux.js.org/
中文 http://www.redux.org.cn/
参考纸质书籍
React推荐书籍 React与Redux开发实例精解
http://item.jd.com/12010463.html

参考电子教材
http://huziketang.com/books/react/
在线练习
https://scriptoj.com/problemsGroups/593a2e29b3838c385539fa4f
视频教程百度云盘下载地址
链接：http://pan.baidu.com/s/1c1ZAezu 密码：3qp0
视频教程在线观看地址
http://www.ablesky.com/org/510_d_381963_0_-1_-1_0_1#orgTab
实战项目
https://github.com/zhufengnodejs/zhufengketangapp


http://www.zhufengpeixun.cn/docs/html/node%E5%91%A8%E6%9C%AB%E5%A4%A7%E7%BA%B2/1.Express.html

老师上课的项目仓库：
https://github.com/zhufengnodejs?tab=repositories




postman



 但凡是前端的路由，在后台都返回前端单页应用主页，到了前端，单页应用会根据路由自动导航到页面。
  里配，也可以在 node服务器端，也可以在webpack-dev-server配




//res.json('欢迎第'+num+'个访问')
    res.json(`欢迎第${num}次访问`)



    //获取自定义属性
    let abc=event.target.dataset.abc;
    let val=event.target.value;


    let jsondata={}
    jsondata[abc]=val
    this.setState(jsondata)


    this.setState({
      [abc]:val
    })
    //[abc]  json里的变量





    //props={path:'/profile',component:Profile}
    //...rest 其余的
    //rest ={path:'/profile'}
    /*
    这两个是一样的， {...rest} 叫做展开运算符
    <Route path='/profile' />
    <Route {...rest} />
    */
    export default  function({component:Component},...rest) {
      return
    }
